name: Android PR workflow

on:
  push:
    branches:
      - main
      - qa
      - develop
      - test-ci
  pull_request:
    branches:
      - develop
      - qa
      - test-ci
jobs:

#  lint:
#    name: Job Lint Check
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: Lint debug flavor
#        run: bash ./gradlew lintDebug --stacktrace
#      - name: Lint results
#        uses: actions/upload-artifact@v1
#        with:
#          name: lint-results
#          path: app/build/reports/lint-results-debug.html
#
#  test:
#    needs: [ lint ]
#    name: Job Unit Tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: Unit tests
#        run: bash ./gradlew test --stacktrace
#      - name: Unit tests results
#        uses: actions/upload-artifact@v3
#        with:
#          name: unit-tests-results
#          path: app/build/reports/tests/testDebugUnitTest/index.html
#        if: always()
#
#  build:
#    needs: [ test ]
#    name: Job Build
#    runs-on: ubuntu-latest
#    #      if: github.ref == 'refs/heads/test-ci'
#    steps:
#      - uses: actions/checkout@v3
#      - name: set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#      #       - name: Build with Gradle
#      #         run: ./gradlew build
#
#      - name: Build debug APK
#        env:
#          PIPELINE_RUN_NUMBER: ${{ github.run_number }}
#        run: ./gradlew assembleDebug
#
#      # Set VERSION_NAME
#      - run: echo "VERSION_NAME=$(${{github.workspace}}/gradlew -q printVersionInformation)" >> $GITHUB_ENV
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v3
#        with:
#          name: workspace_${{ env.VERSION_NAME }}(${{ github.run_number }}).apk
#          path: app/build/outputs/apk/debug/app-debug.apk

  #change branch
  distribution:
#    needs: [ build ]
    name: Job Distribution
    runs-on: ubuntu-latest
    steps:
#      - uses: actions/checkout@v3
#      - name: set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: gradle
#      - name: build release
#        env:
#          PIPELINE_RUN_NUMBER: ${{ github.run_number }}
#        run: ./gradlew assembleRelease
#      - name: Upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID}}
#          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
#          groups: app-testers
#          releaseNotes: ${{ github.event.head_commit.message }}
#          file: app/build/outputs/apk/release/app-release-unsigned.apk

      - name: Send slack notification
        uses: slackapi/slack-github-action@v1.23.0
#        if: ${{ success() }}
        with:
          payload: |
            {
              "text": "Hello"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

#  publish-build:
#    runs-on: ubuntu-latest
#    needs: test
#    if: startsWith(github.ref, 'refs/tags/v')
