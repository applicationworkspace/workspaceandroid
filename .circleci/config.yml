version: 2.1
orbs:
  android: circleci/android@2.0
  slack: circleci/slack@4.12.1

#executors:
#  my-executor:
##    name: android/android-machine
##    resource-class: large
##    tag: 2021.10.1
#    working_directory: ~/repo/outputs
##    docker:
##      - image: circleci/android:api-28-alpha

jobs:
  build:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    working_directory: ~/repo
    steps:
      - checkout
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Assemble debug build
          command: ./gradlew clean assembleDebug

      - android/save-build-cache
      - android/save-gradle-cache
      - slack/notify:
          event: fail
          template: basic_fail_1
      - persist_to_workspace:
          root: ~/repo
          paths:
            - app/build/outputs/apk/debug/

  unit-test:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    working_directory: ~/repo
    steps:
      - checkout
      - android/restore-gradle-cache
      - android/run-tests:
          test-command: ./gradlew test
      - android/save-gradle-cache
      - run:
          name: Save test results (html page, see Artifacts)
          command: |
            mkdir -p test-results/html/
            find . -type d -regex ".*/*reports/tests" -exec cp -avr {} test-results/html/ \;
          when: always
      - run:
          name: Save test results (xml results, see Tests)
          command: |
            mkdir -p test-results/xml/
            find . -type f -regex ".*/*test-results/.*xml" -exec cp {} test-results/xml/ \;
          when: always
      # Make test results show up in the CircleCI build dashboard
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

#      - store_test_results:
#          path: /repo/test-results
#      - store_artifacts:
#          path: /repo/test-results
#          destination: artifact-file

  lint:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    working_directory: ~/repo
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Linting
          command: ./gradlew lint
      - store_artifacts:
          path: app/build/reports
      - android/save-gradle-cache

  deploy-firebase:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx2048m
      GOOGLE_APPLICATION_CREDENTIALS: "gcloud.json"
    steps:
      - attach_workspace:
          at: ./

      - android/restore-gradle-cache
      - android/restore-build-cache

      - run:
          name: Get commit message
          command: echo "export GIT_COMMIT_MESSAGE=\"$(git log --format=oneline -n 1 $CIRCLE_SHA1)\"" >> $BASH_ENV

      - run:
          name: Install Firebase CLI
          command: curl -sL firebase.tools | bash
      - run:
          name: Create Service Account key JSON
          command: |
            echo "$SERVICE_ACCOUNT_KEY" | base64 --decode --ignore-garbage > "gcloud.json"
      #            - run:
      #                name: Create env
      #                command: printf "%s\n" $GOOGLE_APPLICATION_CREDENTIALS
      #                  export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud.json"
      - run:
          name: Deploy to Firebase
          command: firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk --app $FIREBASE_ANDROID_APP_ID --release-notes "$GIT_COMMIT_MESSAGE" --groups "app-testers"

      - slack/notify:
          event: pass
          custom: |
              {
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "CI/CD workflow (CircleCI)"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Type:*\nNew QA build"
                      }
                    ]
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Details:*\nNew build (App distribution) available $GIT_COMMIT_MESSAGE"
                    }
                  }
                ]
              }

  build-release:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    steps:
      - run: echo "Build release apk"
#               - store_artifacts:
#               path: app/build/outputs/apk/release

workflows:
  android_workflow:
    jobs:
      - build
      - unit-test
      - lint
      - deploy-firebase:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      - build-release:
          filters:
            branches:
              only:
                - /release-.*/